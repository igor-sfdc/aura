<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extends="auradocs:topicPanel">
    <aura:set attribute="title" value="Creating Lists"/>

	<ui:block>
		<aura:set attribute="left">
		    <p>You can create lists in three different ways, using <code>aura:iteration</code>, <code>ui:list</code>, or <code>ui:infiniteList</code>. 
			<code>aura:iteration</code> is used for simple lists and can take in data from a model.
			For more information on <code>aura:iteration</code>, see <auradocs:topicLink topic="tagIteration">aura:iteration</auradocs:topicLink> and the <ui:outputURL value="/auradocs#demos?demo=todo" label="aura:iteration demo"/>.
			</p>
			<p> 
			<code>ui:list</code> and <code>ui:infiniteList</code> provide a paging interface to navigate lists. <code>ui:list</code> can be used for more robust list implementations that retrieves and display more data as necessary, with a data provider and a template for each list item.
			Additionally, use <code>ui:infiniteList</code> if you want a robust list implementation similar to <code>ui:list</code>, but with a handler that enables you to retrieve and display more data when the user reaches the bottom of the list.
			</p>
		    
		</aura:set>
		<aura:set attribute="right">
		<b>Key Component</b><br/>
		<auradocs:defLink defType="component" descriptor="ui:list"/><br/>
		<auradocs:defLink defType="component" descriptor="ui:infiniteList"/>
		</aura:set>
	</ui:block>
	<p>Here is a basic set up of the <code>ui:list</code> component with a required data provider and template. </p>

<auradocs:codeblock>&lt;ui:list itemVar="item">
    &lt;aura:set attribute="dataProvider">
        &lt;auradev:testDataProvider />
    &lt;/aura:set>
    &lt;aura:set attribute="header">
        Item List
    &lt;/aura:set>
    &lt;aura:set attribute="itemTemplate">
        &lt;auradocs:demoListTemplate label="<aura:text value="{!"/>item.label}" />
    &lt;/aura:set>
&lt;/ui:list></auradocs:codeblock>
    <p><code>itemVar</code> is a required attribute that is used to iterate over the items provided by the item template. In the above example, <code><aura:text value="{!"/>item.label}</code> iterates over the items provided by the data provider and displays the labels.</p>
	<p>The sample template, <code>auradocs:demoListTemplate</code> is as follows. This template is a row of text generated by the data provider.</p>
<auradocs:codeblock>&lt;aura:component> 
  &lt;aura:attribute name="label" type="String"/>
  &lt;div class="row">
    <aura:text value="{!"/>v.label}
  &lt;/div>
&lt;/aura:component></auradocs:codeblock>
	
	<auradocs:info>For an example of using the <code>ui:infinitelist</code> component, see the <ui:outputURL value="/auradocs#demos?demo=list" label="ui:infiniteList demo"/>.</auradocs:info>
    
    <h3>Working with List Events</h3>
    <p><code>ui:list</code> and <code>ui:infiniteList</code> inherits from <code>ui:abstractList</code>. Common events for <code>ui:list</code> include user interface events like <code>click</code> events, and list-specific events like <code>refresh</code> and <code>triggerDataProvider</code>.
    For a full list of events that you can use with <code>ui:list</code>, see the <auradocs:defLink defType="component" descriptor="ui:list"/> component reference.</p>
    
    <h4><code>refresh</code></h4>
    <p>The <code>refresh</code> event handles a list data refresh and fires the <code>triggerDataProvider</code> event.
    You can fire the <code>refresh</code> event by using the following sample code in your client-side controller action.</p>
<auradocs:codeblock>var listData = cmp.find("listData");
listData.get("e.refresh").fire();</auradocs:codeblock>
    
    <h4><code>showMore</code></h4>
    <p>The <code>showMore</code> event in <code>ui:infiniteList</code> handles the fetching of your data and displays it. This event fires the <code>triggerDataProvider</code> event as well. </p>
    
    <h4><code>triggerDataProvider</code></h4>
    <p>The<code>triggerDataProvider</code> event triggers the providing of data from a data provider. It is also run during component initialization and refresh. For example, you can use this event if you want to retrieve more data in a <code>ui:infiniteList</code> component.</p>
    <auradocs:codeblock>cmp.getValue("v.currentPage").setValue(targetPage,true);
var listData = component.find("listData");
listData.get("e.triggerDataProvider").fire();</auradocs:codeblock>

   
	<p>For more information on client-side controllers, see <auradocs:topicLink topic="helloActions">Client-Side Controllers</auradocs:topicLink>.</p>
	
	<h3>Providing Data to the List Component</h3>
	<p>In the basic set up above, <code>auradocs:demoDataProvider</code> provides the list of data to the <code>ui:list</code> component. <code>auradocs:demoDataProvider</code> extends <code>ui:dataProvider</code> and takes in a server-side model.</p>
	The following code is the sample data provider, <code>auradocs:demoDataProvider</code>.
<auradocs:codeblock>&lt;aura:component extends="ui:dataProvider"
    model="java://org.auraframework.component.auradev.TestDataProviderModel" 
    controller="java://org.auraframework.component.auradev.TestDataProviderController" 
    description="A data provider for ui:list"> 
      &lt;aura:handler name="provide" action="<aura:text value="{!"/>c.provide}"/>
&lt;/aura:component></auradocs:codeblock>

	<p>The <code>provide</code> event is fired on initialization by the parent <code>ui:abstractList</code> component. You can customize the <code>provide</code> event in your client-side controller. For example, the following code shows a sample <code>provide</code> helper function for a data provider.</p>
<auradocs:codeblock>var dataProvider = component.getConcreteComponent();
var action = dataProvider.get("c.getItems");
    
//Set the parameters for this action
action.setParams({
    "currentPage": dataProvider.get("v.currentPage"),
    "pageSize": dataProvider.get("v.pageSize")
    //Other ui:list or ui:infiniteList parameters
});
    
//Set the action callback
action.setCallback(this, function(action) {
    if (action.getState() === "SUCCESS") {
        var result = action.getReturnValue();                    
        this.fireDataChangeEvent(dataProvider, result); 
    }
});
$A.enqueueAction(action);</auradocs:codeblock>
	<p>See the data provider at <code>aura-components/src/main/components/auradocs/demoDataProvider/</code> in the  <ui:outputURL value="https://github.com/forcedotcom/aura" label="GitHub repo"/>.</p>
	<p>To learn how the data provider is retrieving data from the model, see the server-side model at <code>aura-impl/src/main/java/org/auraframework/component/auradev/TestDataProviderModel.java</code> in the <ui:outputURL value="https://github.com/forcedotcom/aura" label="GitHub repo"/>.</p> 
	
	<h3>Styling Your List Component</h3>
	<p>The <code>ui:list</code> component is customizable with regular CSS styling. For example, the sample template code above has <code>&lt;div class="row"></code>. To apply CSS, you can use the following CSS selector in the template component.</p>
<auradocs:codeblock>.THIS .row{
    //CSS declaration
 }</auradocs:codeblock>
	<p>For an example on styling the list component, see the <ui:outputURL value="/auradocs#demos?demo=list" label="ui:list demo"/>.
	For more information on styling components, see <auradocs:topicLink topic="helloHTML">Applying HTML and CSS</auradocs:topicLink>.</p>
	
</aura:component>


    