<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:documentation>
	<aura:description>
		<p>
			 A <code>ui:inputSelect</code> component is rendered as an HTML <code>select</code> element. It contains options, represented by the <code>ui:inputSelectOption</code> components. To enable multiple selections, set <code>multiple="true"</code>.
			Group options using <code>ui:inputSelectOptionGroup</code> and in each group, nest each option with <code>ui:inputSelectOption</code>. <code>ui:inputSelect</code> does not support the use of <code>aura:iteration</code> in its body.
		</p>
		<h4>Generating Options Dynamically</h4>
		<p>
			To generate options dynamically, you can load the options on the controller-side action.
		</p>
		<pre>
&lt;aura:component>
    &lt;aura:handler name="init" value="{!this} action="{!c.doInit}"/>
    &lt;ui:inputSelect label="Select me:" class="dynamic" aura:id="InputSelectDynamic""/>
&lt;/aura:component>
		</pre>
		<p>
			The following client-side controller generates options using the options attribute on the <code>ui:inputSelect</code> component. <code>v.options</code> takes in the list of objects and converts them into list options.
			The <code>opts</code> object constructs <code>InputOption</code> objects to create the <code>ui:inputSelectOptions</code> components within <code>ui:inputSelect</code>. 
			Although the sample code generates the options during initialization, the list of options can be modified anytime when you manipulate the list in <code>v.options</code>. The component automatically updates itself and rerenders with the new options.
		</p>
		<pre>
({
    doInit : function(cmp) {
        var opts = [
            { class: "optionClass", label: "Option1", value: "opt1", selected: "true" },
            { class: "optionClass", label: "Option2", value: "opt2" },
            { class: "optionClass", label: "Option3", value: "opt3" }
           
        ];
        cmp.find("InputSelectDynamic").set("v.options", opts);
    }
})		
		</pre>
		<p><code>class</code> is a reserved keyword that might not work with older versions of Internet Explorer. We recommend using <code>"class"</code> with double quotes.</p>
		
		<h4>Generating Options using a Model</h4>
		<p>
			Display a list of options from a model by using the format <code>&lt;ui:inputSelect options="{!m.selectOptions}" /></code> and creating the list of options in the model using <code>ArrayList&lt;InputOption></code>.
			The following example shows a model that generates a list of options for a <code>ui:inputSelect</code> component.
		</p>
		<pre>
@Model
public class SizeModel {

  @AuraEnabled
  public List&lt;InputOption> getSizes() {
    ArrayList&lt;InputOption> a = new ArrayList&lt;InputOption>(3);
    InputOption m1 = new InputOption("Small", "s", false, "Small");
    a.add(m1);
    InputOption m2 = new InputOption("Medium", "m", false, "Medium");
    a.add(m2);
    InputOption m3 = new InputOption("Large", "l", false, "Large");
    a.add(m3);
    return a;
  }
}
		</pre>
		<p>The following example component displays the list of options using the given model.</p>
		<pre>
&lt;aura:component model="org.auraframework.docs.SizeModel">
  &lt;aura:attribute name="sizes" type="List" description="A list input options."/>
  &lt;ui:inputSelect label="Size" options="{!m.sizes}"/>
&lt;/aura:component>
		</pre>
		<p>The <code>InputOption</code> object has these parameters.</p>
		<ul>
			<li>label (String): The label of the option to display on the user interface</li>
			<li>name (String): The name of the option</li>
			<li>selected (Boolean): Indicates whether the option is selected</li>
			<li>value (String): The value of this option</li>
		</ul>
	</aura:description>	
		<aura:example name="inputselect" ref="auradocs:demoSelect" label="Using ui:inputSelect">
    	<p>This example shows several ways to implement <code>ui:inputSelect</code>.</p>
    	
	</aura:example>
	
</aura:documentation>
