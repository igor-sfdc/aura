<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:documentation>
	<aura:description>
		<p>
			<code>ui:inputDefaultError</code> is the default implementation for both default error handling and custom error handling. This component displays as a list of errors below the field.
			Field-level error messages can be added using <code>addErrors()</code>. You can use the default error handling by setting the input value to false and adding the error message. 
		This example displays a field-level error if the input is not a number.	
		</p>
    	<pre>var inputCmp = cmp.find("inputCmp");
var value = inputCmp.get("v.value");
if (isNaN(value)) {
    inputCmp.setValue("v.value", false);
    inputCmp.addErrors("v.value", [{message:"Input not a number: " + value}]);
    } else {
    //clear error
    inputCmp.setValid("v.value", true);
    }
}
</pre>

	<p>To use custom error handling on input components, use the <code>onError</code> and <code>onClearErrors</code> attributes, which are wired to <code>ui:validationError</code> and <code>ui:clearErrors</code>
	events respectively. In the controller methods, you can then fire the appropriate events.</p>
<pre>// fire event that will set error
    var errorEvent = inputCmp.getEvent("onError");
    errorEvent.setParams({ "errors" : [{message:"Input not a number: " + value}]});
    errorEvent.fire();

    // fire event that will clear error
    var clearErrorEvent = inputCmp.getEvent("onClearErrors");
    clearErrorEvent.fire();
}</pre>

	<p>In the custom event handler, retrieve the errors by calling <code>getParam()</code> and invalidate the input value using <code>setValid()</code>. To update the errors, fire the <code>updateError</code> event.</p>
<pre>
var errorsObj = event.getParam("errors");

/* do any custom error handling
 * logic desired here */

// set error using default error component
inputCmp.setValid("v.value", false);
inputCmp.addErrors(errorsObj);
var updateErrorEvent = inputCmp.getEvent("updateError");
updateErrorEvent.fire();
</pre>	

	<p> Similarly, you can customize how you want to clear the errors by wiring up the <code>onClearErrors</code> attribute on the input component to a controller method.</p>
<pre>/* do any custom error handling
 * logic desired here */
inputCmp.setValid("v.value", true);
var updateErrorEvent = inputCmp.getEvent("updateError");
updateErrorEvent.fire();</pre>

	</aura:description>	
		<aura:example name="inputDefaultError" ref="uiExamples:inputTextExample" label="Using Field-Level Errors">
    	<p>This example shows a <code>ui:inputText</code> component with the default error handling, and a corresponding <code>ui:outputText</code> component for text rendering.</p>
	</aura:example>
	
</aura:documentation>