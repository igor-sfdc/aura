package org.auraframework.ds.serviceloader.impl;

/*
 * Copyright (C) 2013 salesforce.com, inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.util.Map;

import org.auraframework.ds.serviceloader.AuraServiceProvider;

/**
 * AuraServiceProviderValue wrapper class to be able to sort AuraServiceProviderValue's in the reverse order of priority property
 * (large priority numbers go first)
 */
final class AuraServiceProviderValue implements Comparable<AuraServiceProviderValue>{

    private final int priority;
    private final AuraServiceProvider value;
    private final String name;

    AuraServiceProviderValue(AuraServiceProvider value, Map<String, ?> properties) {
        this.value = value;
        this.priority = getPriority(properties);
        this.name = getName(properties);
    }

    public AuraServiceProvider getValue() {
        return value;
    }

    public AuraServiceProvider getName() {
        return value;
    }

    @Override
    public int compareTo(AuraServiceProviderValue otherAuraServiceProviderValue) {
        int otherPriority = otherAuraServiceProviderValue.priority;
        return otherPriority > this.priority ? 1 : otherPriority < this.priority ? -1 : 0;
    }

    private static int getPriority(Map<String, ?> properties) {
        Object priorityProperty = properties.get("priority");

        if (priorityProperty == null) {
            return 0;
        }
        
        int priority;
        
        try {
            priority = Integer.valueOf(String.valueOf(priorityProperty));
            return priority;
        } catch (NumberFormatException e) {
            // ignore
            priority = 0;
        }
        return priority;
    }

    private static String getName(Map<String, ?> properties) {
        Object nameProperty = properties.get("name");

        if (nameProperty == null) {
            // This should never happen
            return "";
        }

        return String.valueOf(nameProperty);
    }

    /**
     * Generated by Eclipse
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + priority;
        result = prime * result + ((value == null) ? 0 : value.hashCode());
        return result;
    }

    /**
     * Generated by Eclipse
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        AuraServiceProviderValue other = (AuraServiceProviderValue)obj;
        if (name == null) {
            if (other.name != null) {
                return false;
            }
        } else if (!name.equals(other.name)) {
            return false;
        }
        if (priority != other.priority) {
            return false;
        }
        if (value == null) {
            if (other.value != null) {
                return false;
            }
        } else if (!value.equals(other.value)) {
            return false;
        }
        return true;
    }

}
